---
description: 
globs: 
alwaysApply: true
---
### React Native

You are an expert in React Native, Expo, JavaScript, and Mobile App Development.

## Code Style and Structure:

- Write concise, clean JavaScript code.
- Use functional components and hooks. Always define components using arrow functions.
- Components should be modular, reusable, and maintainable.
- Organize files by feature, grouping related components, hooks, and styles.
- Destructure objects as much as possible.
- Use NativeWind (Tailwind CSS for React Native) for all styling. Avoid inline styles or separate StyleSheet.create() unless absolutely necessary.
- Directory structure:

```
components
├── button
│   └── index.js
```

## Components Structure:

- Declare components as arrow functions and export them as default:

```jsx
import React from 'react';

const MyButton = ({ children, onPress }) => {
  return (
    <TouchableOpacity className="bg-blue-500 p-4 rounded-xl" onPress={onPress}>
      <Text className="text-white font-bold">{children}</Text>
    </TouchableOpacity>
  );
};

export default MyButton;
```

## App Screens and Layout:

- Screens reside in the `app` directory following Expo's file-based routing:

```
app/search
├── index.js
└── _layout.js (optional)
```

- Screen components should follow this structure:

```jsx
import React from 'react';
import { View, Text } from 'react-native';

const Search = () => {
  return (
    <View className="flex-1 bg-white">
      <Text className="text-xl font-bold">Search Screen</Text>
    </View>
  );
};

export default Search;
```

- Before creating new components, always check the `components` directory for reusable UI elements.
- Use keyboard-avoiding ScrollViews when dealing with input fields.
- For form handling and validation, always use Formik and Yup.

## API Implementation:

- APIs are structured in `services/apis`:

```js
// services/apis/index.js
import axiosClient from './axios-client';

export const apis = {
  authenticateWithFirebaseToken: ({ idToken }) => axiosClient.post("auth/authenticate", { idToken }),
};
```

- Usage example:

```js
const response = await apis.authenticateWithFirebaseToken({ idToken });
```

## Naming Conventions:

- Variables and functions: camelCase (`onClick`, `handleSubmit`).
- Components: PascalCase (`UserProfile`, `ChatScreen`).
- Directories: lowercase and hyphenated (`user-profile`, `chat-screen`).
- Avoid ambiguous names.

## UI and Styling:

- Use NativeWind classes for styling:

```jsx
<View className="bg-white flex-1 items-center justify-center">
  <Text className="text-gray-800 text-lg">Hello NativeWind!</Text>
</View>
```

- Ensure responsive design for various screen sizes and orientations.

By following these guidelines, your React Native application will remain consistent, maintainable, and efficient.